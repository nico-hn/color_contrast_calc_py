import unittest
from color_contrast_calc.threshold_finders import lightness
import color_contrast_calc.color as color_module
from color_contrast_calc.color import Color

class TestLightness(unittest.TestCase):
    def setup(self):
        pass

    def test_find(self):
        black = color_module.from_name('black')
        white = color_module.from_name('white')
        orange = color_module.from_name('orange')
        mintcream = color_module.from_name('mintcream')
        yellow = color_module.from_name('yellow')
        springgreen = color_module.from_name('springgreen')
        green = color_module.from_name('green')
        darkgreen = color_module.from_name('darkgreen')
        blue = color_module.from_name('blue')
        azure = color_module.from_name('azure')
        blueviolet = color_module.from_name('blueviolet')
        fuchsia = color_module.from_name('fuchsia')

        new_rgb = lightness.find(fuchsia.rgb, azure.rgb, 'A')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(fuchsia)
        self.assertTrue(azure.has_higher_luminance(fuchsia))
        self.assertTrue(azure.has_higher_luminance(new_color))
        self.assertEqual(new_color.hex, '#e9ffff')
        self.assertGreater(new_contrast_ratio, 3.0)
        self.assertAlmostEqual(new_contrast_ratio, 3, 1)

        contrast_against_white = darkgreen.contrast_ratio_against(white)
        contrast_against_black = darkgreen.contrast_ratio_against(black)
        new_rgb = lightness.find(darkgreen.rgb, darkgreen.rgb, 'A')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(darkgreen)
        self.assertFalse(darkgreen.is_light_color())
        self.assertGreater(contrast_against_white, contrast_against_black)
        self.assertEqual(new_color.hex, '#00c000')
        self.assertTrue(new_color.has_higher_luminance(darkgreen))
        self.assertGreater(new_contrast_ratio, 3.0)
        self.assertAlmostEqual(new_contrast_ratio, 3, 1)

        new_rgb = lightness.find(white.rgb, orange.rgb, 'AA')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(white)
        self.assertEqual(new_color.hex, '#a56a00')
        self.assertGreater(new_contrast_ratio, 4.5)
        self.assertAlmostEqual(new_contrast_ratio, 4.5, 1)

        new_rgb = lightness.find(white.rgb, green.rgb, 'AA')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(white)
        self.assertEqual(new_color.hex, '#008a00')
        self.assertGreater(new_contrast_ratio, 4.5)
        self.assertAlmostEqual(new_contrast_ratio, 4.5, 1)

        new_rgb = lightness.find(blueviolet.rgb, orange.rgb, 'AA')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(blueviolet)
        self.assertEqual(new_color.hex, '#ffdc9a')
        self.assertGreater(new_contrast_ratio, 4.5)
        self.assertAlmostEqual(new_contrast_ratio, 4.5, 1)

        contrast_against_white = springgreen.contrast_ratio_against(white)
        contrast_against_black = springgreen.contrast_ratio_against(black)
        new_rgb = lightness.find(springgreen.rgb, springgreen.rgb, 'AA')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(springgreen)
        self.assertTrue(springgreen.is_light_color())
        self.assertLess(contrast_against_white, contrast_against_black)
        self.assertEqual(new_color.hex, '#007239')
        self.assertFalse(new_color.has_higher_luminance(springgreen))
        self.assertGreater(new_contrast_ratio, 4.5)
        self.assertAlmostEqual(new_contrast_ratio, 4.5, 1)

        new_rgb = lightness.find(orange.rgb, yellow.rgb)
        new_color = Color(new_rgb)
        self.assertTrue(new_color.is_same_color(white))
        self.assertLess(new_color.contrast_ratio_against(yellow), 4.5)

        new_rgb = lightness.find(yellow.rgb, mintcream.rgb)
        new_color = Color(new_rgb)
        self.assertTrue(new_color.is_same_color(white))
        self.assertLess(new_color.contrast_ratio_against(yellow), 4.5)

        new_rgb = lightness.find(white.rgb, orange.rgb, 'AAA')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(white)
        self.assertEqual(new_color.hex, '#7b5000')
        self.assertGreater(new_contrast_ratio, 7.0)
        self.assertAlmostEqual(new_contrast_ratio, 7, 1)

        new_rgb = lightness.find(white.rgb, green.rgb, 'AAA')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(white)
        self.assertEqual(new_color.hex, '#006800')
        self.assertGreater(new_contrast_ratio, 7.0)
        self.assertAlmostEqual(new_contrast_ratio, 7, 1)

        new_rgb = lightness.find(green.rgb, blue.rgb, 'AAA')
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(green)
        self.assertTrue(new_color.is_same_color(black))
        self.assertLess(new_contrast_ratio, 7.0)

        new_rgb = lightness.find(white.rgb, orange.rgb, 6.5)
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(white)
        self.assertEqual(new_color.hex, '#825400')
        self.assertGreater(new_contrast_ratio, 6.5)
        self.assertAlmostEqual(new_contrast_ratio, 6.5, 1)

        new_rgb = lightness.find(white.rgb, green.rgb, 6.5)
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(white)
        self.assertEqual(new_color.hex, '#006e00')
        self.assertGreater(new_contrast_ratio, 6.5)
        self.assertAlmostEqual(new_contrast_ratio, 6.5, 1)

        new_rgb = lightness.find(green.rgb, blue.rgb, 6.5)
        new_color = Color(new_rgb)
        new_contrast_ratio = new_color.contrast_ratio_against(green)
        self.assertTrue(new_color.is_same_color(black))
        self.assertLess(new_contrast_ratio, 6.5)
